#*
* treeSelect 树表单选择
*
* @param name 表单名称
* @param value 表单值
* @param mapInfo 标签的其它属性 其中 data-URL 属性表示AJAX取值地址 为空则不取AJAX模式

*#
#macro treeSelect(name value mapInfo)#set(sid=mapInfo?.id?:fmt("sid%d",rand()),tempid=fmt("sid%d",rand()))
<script>
var zNodes${tempid} =[];
</script>
<input id="${sid}" name=""  class="form-control no-radius" type="text" value="" #mapToHtml(mapInfo)/>
<input id="${sid}-input" name="${name}" type="hidden" value="${value}" #mapToHtml(mapInfo)/>
<div class="hide" id="${sid}-rap">
<div id="${sid}-content" class="tree-sel-content t-menu-content hide">
<ul id="ztree${sid}" class="ztree">
</ul>
<div class="hide" id="${sid}-msg">暂无信息</div>
<div class="fix-part" style="padding:0 5px">#bodyContent</div>
##		<span style="position:absolute;right:10px;bottom:5px;z-index:2;cursor:pointer" id="close${sid}"><i class="fa fa-remove"></i></span>
</div>
</div>
<script type="text/javascript">
$(function(){
	var setting = {
	view: {
	dblClickExpand: false
	},
	data: {
	simpleData: {
	enable: true
	}
	},
	callback: {
	beforeClick: beforeClick,
	onClick: onClick
	}
	};
	var zTree;
	var zNodes =zNodes${tempid};
	var $treeContent=$("#ztree${sid}");
	var $treeRap=$("#${sid}-content");
	var $input=$("#${sid}");
	var $inputV=$("#${sid}-input");
    #set(dataurl=mapInfo?.get("data-URL"))
	#if(dataurl)
	$.ajax({
		type: "GET",
		url: "#link(dataurl)",
		dataType: "json",
		success: function(data) {
			zNodes=data;
			initzTree();
		}
	});
	#else
		initzTree();
	#end
	function initzTree(){
		zTree=$.fn.zTree.init($treeContent, setting, zNodes);
		initInputVale();
	}
	function initInputVale(){
		var $val=$inputV.val();
		if(!$val) return false;
		for(var i=0;i<zNodes.length;i++){
			if($val==zNodes[i].id){
				 $input.val(zNodes[i].name);
				 $inputV.val($val);
				 $input.trigger("setValue",zNodes[i]);
				break;
			}
		}
	}
	function beforeClick(treeId, treeNode) {
		var check = (treeNode && !treeNode.isParent);
		if (!check) {
			zTree.expandNode(treeNode);
			return false;
		}
	}
	function onClick(e, treeId, treeNode) {
		 $input.val(treeNode.name);
		 $inputV.val(treeNode.id);
		 $input.trigger("setValue",treeNode);
		 hideMenu();
	}
	function hideMenu() {
		 $treeRap.fadeOut("fast");
		 $("#${sid}-rap").append($treeRap);
	}
	$input.on("click",function(){
		$("body").append($treeRap);
		var thisOffset = $(this).offset();
		$treeRap.css({width:$(this).css("width"),left:thisOffset.left + "px", top:thisOffset.top + $(this).outerHeight() + "px"}).slideDown("fast");
	}).on("add",function(e,newNode){
		zTree.addNodes(null, newNode);
	});
	$("body").on("click",function(e){
		if($(e.target).attr("id")!=$input.attr("id")&&$(e.target).parents("#"+$treeRap.attr("id")).size()==0){
			hideMenu();
		}
	}).on("click",".fix-part",function(e){
		hideMenu();
	});
	function bfxs(zTree, nodes, tt) {
		if (nodes.children == null) {//无子节点
			if (nodes[zTree.setting.data.key.name].indexOf(tt) >= 0) {//无子节点，但是包含tt
				fjdxs(zTree, nodes);
			}
		}else {//有子节点
			if (nodes[zTree.setting.data.key.name].indexOf(tt) >= 0){//有而且包含
				fjdxs(zTree, nodes);
				xsall(zTree, nodes);
			}else {//有但不包含
				$.each(nodes.children, function (aa, bb) {
					bfxs(zTree, bb, tt);
				})
			}
		}
	}
	///显示所有父节点
	function fjdxs(zTree, nodes) {
		if (nodes.getParentNode() == null) {
			zTree.showNode(nodes);
		}
		else {
			zTree.showNode(nodes);
			fjdxs(zTree, nodes.getParentNode());
		}
	}
	///全显
	function xsall(ztree, nodes) {
		ztree.showNode(nodes);
		if (nodes.children != null) {
			$.each(nodes.children, function (x, y) {
				xsall(ztree, y);
			})
		}
	}
	///么有子节点的直接隐藏
	function ycall(ztree, nodes) {
		ztree.hideNode(nodes);
		if (nodes.children != null) {
			 $.each(nodes.children, function (x, y) {
				ycall(ztree, y);
			})
		}
	}
	$("#${sid}").on("propertychange input",function(){
		var key = $(this).val();
		var nodes = zTree.getNodes();
		zTree.showNodes(nodes);
		if(!key){
			$("#${sid}-msg").hide();
			return;
		}
		var zts = zTree.getNodesByParamFuzzy("name", key);
		if (zts.length==0){
			$("#${sid}-msg").show();
		}else{
			$("#${sid}-msg").hide();
		}

		$.each(nodes, function (x, y) {
			ycall(zTree, y);
		});

		$.each(nodes, function (index, node) {
			bfxs(zTree, node, key);
		});
		zTree.expandAll(true);
	}).on("close",function(){
		hideMenu();
	});
});
</script>
#end

#*
* treeSelectItem 树表单选择初始化
*
* @param id 结点ID
* @param pid 父结点ID
* @param name 显示标题

*#
#macro treeSelectItem(id pid name)
<script type="text/javascript">
zNodes${tempid}.push({id:${id}, pId:${pid}, name:"${name}"});
</script>
#end

#*
* zTreeList 左侧树
*
* @param dataurl 数据地址
* @param optionMap 属性设置 readOnly 为全局是否为只读

*#
#macro zTreeList(dataurl optionMap)
	#set(ztreeid=optionMap?.id?:fmt("zid%d",rand()))
<ul id="${ztreeid}" class="ztree leftztree" data-url="#link(dataurl)"></ul>
<script type="text/javascript">
    <!--
    $(function(){
        var setting = {
			#if(!optionMap?.readOnly)
                view: {
                    addHoverDom: addHoverDom,
                    removeHoverDom: removeHoverDom,
                    selectedMulti: false
                },
                edit: {
                    drag: {
                        autoExpandTrigger: true,
                        prev: dropPrev,
                        inner: dropInner,
                        next: dropNext
                    },

                    enable: true,
                    editNameSelectAll: true,
                    showRemoveBtn: showRemoveBtn,
                    showRenameBtn: showRenameBtn,
                    showAddBtn: showAddBtn

                },#end
            data: {
                simpleData: {
                    enable: true
                }
            },
            callback: {
				#if(!optionMap?.readOnly)
                    beforeEditName: beforeEditName,
                    beforeRemove: beforeRemove,
                    beforeRename: beforeRename,
                    beforeDrag: beforeDrag,
                    beforeDrop: beforeDrop,
                    beforeDragOpen: beforeDragOpen,
                    onDrag: onDrag,
                    onDrop: onDrop,
                    onRemove: onRemove,
                    onRename: onRename,
                    beforeDrag: beforeDrag,
                    beforeDrop: beforeDrop,
                    beforeDragOpen: beforeDragOpen,
                    onDrag: onDrag,
                    onDrop: onDrop,
                    onNodeCreated:onNodeCreated,
				#end
                beforeClick: beforeClick,
                onClick: onClick,
                onExpand: onExpand            }
        };

        var zNodes =[];
        var log, className = "dark";
        var ztreeid="${ztreeid}";
        var zTree;
        var linkurl;
        var editUrl;
        var addUrl;
        var delUrl;
        var dataformat={name:"name",id:"id",pid:"pid"};
        function setLinkUrl(url){
            linkurl=url;
        }
        function setEditUrl(url){
            editUrl=url;
        }
        function setAddUrl(url){
            addUrl=url;
        }
        function setDelUrl(url){
            delUrl=url;
        }
	#bodyContent
        function refreshdata(callback){
            $.ajax({
                type: "GET",
                url: $("#${ztreeid}").attr("data-url"),
                dataType: "html",
                success: function(data) {
                    data= eval(' ' +data+ ' ');
                    data.splice(0, 0, {id:"allcontent", pId:0, name:"全部",add:true});
                    zNodes=data;
                    zTree=$.fn.zTree.init($("#"+ztreeid), setting, zNodes);
                    callback&&callback();
                    //initzTree();
                }
            });
        }
        refreshdata();
        //var zTree=$.fn.zTree.init($("#"+ztreeid), setting, zNodes);

        $("#${ztreeid}").on("refresh",function(e,callback){
            refreshdata(callback);
        })
        function beforeEditName(treeId, treeNode) {

            if(editUrl){
                layer.prompt({title: '修改名称',value:treeNode.name}, function(text){
                    var data={rand:Math.random()};
                    data[dataformat.id]=treeNode.id;
                    data[dataformat.name]=text;
                    data[dataformat.pid]=treeNode.pId;
                    $.ajax({
                        type: "GET",
                        url: editUrl,
                        data:data,
                        dataType: "json",
                        success: function(data) {
                            if(data.status=="success"||data.status=="y"){
                                layer.msg(data.info,{icon: 1})
                            }else{
                                layer.msg(data.info, {icon: 2})
                            }
                            refreshdata();
                        }
                    });
                    layer.closeAll()
                });
            }else{
                layer.msg("修改地址不可用，操作失败", {icon: 2})
            }
            //className = (className === "dark" ? "":"dark");
            return false;
        }
        function onNodeCreated(event, treeId, treeNode){
            var rightWidth=3;
            if(treeNode.edit) {
                rightWidth+=35;
            }
            if(treeNode.add) {
                rightWidth+=15;
            }
            $("#"+treeNode.tId+"_a").css("padding-right",rightWidth+"px");

        }
        function beforeRemove(treeId, treeNode) {
            className = (className === "dark" ? "":"dark");
            //var zTree = $.fn.zTree.getZTreeObj("treeDemo");
            zTree.selectNode(treeNode);
            layer.confirm("确认删除吗?",function(e){


                if(delUrl){
                    var data={rand:Math.random()};
                    data[dataformat.id]=treeNode.id;
                    data[dataformat.name]=treeNode.name;
                    data[dataformat.pid]=treeNode.pId;
                    $.ajax({
                        type: "GET",
                        url: delUrl,
                        data:data,
                        dataType: "json",
                        success: function(data) {
                            //layer.close(e);
                            if(data.status=="success"||data.status=="y"){
                                layer.msg(data.info,{icon: 1})
                            }else{
                                layer.msg(data.info,{icon: 2})
                            }
                            refreshdata();
                        }
                    });
                }else{
                    layer.msg("删除地址不可用，操作失败", {icon: 2})
                }
            });
            return false;//confirm("确认删除 节点 -- " + treeNode.name + " 吗？");
        }
        function onRemove(e, treeId, treeNode) {
            return false
        }
        function beforeRename(treeId, treeNode, newName, isCancel) {
            //className = (className === "dark" ? "":"dark");

            return false;
        }
        function onRename(e, treeId, treeNode, isCancel) {

        }
        function showRemoveBtn(treeId, treeNode) {
            if(treeNode.edit) return true;
        }
        function showAddBtn(treeId, treeNode) {
            return 0;
        }
        function showRenameBtn(treeId, treeNode) {
            if(treeNode.edit) return true;
        }

        function beforeClick(treeId, treeNode) {
            if(treeNode.clickAble===false){
                zTree.expandNode(treeNode);
                return false;
            }
            /*var check = (treeNode && !treeNode.isParent);
            if (!check) {
                zTree.expandNode(treeNode);
                return false;
            }//return check;*/
        }
        function onClick(e, treeId, treeNode) {
            var id=treeNode.id;
            var url=linkurl;
            if(treeNode.id!="allcontent"){
                url=linkurl+(linkurl.indexOf("?")>-1?"&":"?")+dataformat.id+"="+treeNode.id;
            }
            #if(optionMap?.linkAjax)
                $(e.target).closest("a").attr("data-href",url).trigger("ztreeClick");
            #else
                $(e.target).closest("a").attr("href",url);
            #end
        }

        var newCount = 1;
        function addHoverDom(treeId, treeNode) {
            //console.log(treeNode.pId)
            if(!treeNode.add){
                return false;
            }

            //return treeNode.pId;
            var sObj = $("#" + treeNode.tId + "_span");
            if (treeNode.editNameFlag || $("#addBtn_"+treeNode.tId).length>0) return;
            var addStr = "<span class='button add' id='addBtn_" + treeNode.tId
                    + "' title='add node' onfocus='this.blur();'></span>";
            sObj.after(addStr);
            var btn = $("#addBtn_"+treeNode.tId);
            if (btn) btn.bind("click", function(){
                if(addUrl){
                    layer.prompt({title: '请填写名称'}, function(text){
                        var data={rand:Math.random()};
                        data[dataformat.name]=text;
                        data[dataformat.pid]=treeNode.id=="allcontent"?0:treeNode.id;
                        if(treeNode.id=="allcontent") data[dataformat.pid]=0;
                        $.ajax({
                            type: "GET",
                            url: addUrl,
                            data:data,
                            dataType: "json",
                            success: function(data) {
                                if(data.status=="success"||data.status=="y"){
                                    layer.msg(data.info, {icon: 1})
                                }else{
                                    layer.msg(data.info, {icon: 2})
                                }
                                refreshdata();
                            }
                        });
                        layer.closeAll()
                    });
                }else{
                    layer.msg("新增地址不可用，操作失败", {icon: 2});
                    return false;
                }
                return false;
            });
        };
        function removeHoverDom(treeId, treeNode) {
            $("#addBtn_"+treeNode.tId).unbind().remove();
        };
        function selectAll() {
            //zTree.setting.edit.editNameSelectAll =  $("#selectAll").attr("checked");
        }

        function dropPrev(treeId, nodes, targetNode) {
            var pNode = targetNode.getParentNode();
            if (pNode && pNode.dropInner === false) {
                return false;
            } else {
                for (var i=0,l=curDragNodes.length; i<l; i++) {
                    var curPNode = curDragNodes[i].getParentNode();
                    if (curPNode && curPNode !== targetNode.getParentNode() && curPNode.childOuter === false) {
                        return false;
                    }
                }
            }
            return true;
        }
        function dropInner(treeId, nodes, targetNode) {
            if (targetNode && targetNode.dropInner === false) {
                return false;
            } else {
                for (var i=0,l=curDragNodes.length; i<l; i++) {
                    if (!targetNode && curDragNodes[i].dropRoot === false) {
                        return false;
                    } else if (curDragNodes[i].parentTId && curDragNodes[i].getParentNode() !== targetNode && curDragNodes[i].getParentNode().childOuter === false) {
                        return false;
                    }
                }
            }
            return true;
        }
        function dropNext(treeId, nodes, targetNode) {
            var pNode = targetNode.getParentNode();
            if (pNode && pNode.dropInner === false) {
                return false;
            } else {
                for (var i=0,l=curDragNodes.length; i<l; i++) {
                    var curPNode = curDragNodes[i].getParentNode();
                    if (curPNode && curPNode !== targetNode.getParentNode() && curPNode.childOuter === false) {
                        return false;
                    }
                }
            }
            return true;
        }

        function beforeDrag(treeId, treeNodes) {
            className = (className === "dark" ? "":"dark");

            for (var i=0,l=treeNodes.length; i<l; i++) {
                if (treeNodes[i].drag === false) {
                    curDragNodes = null;
                    return false;
                } else if (treeNodes[i].parentTId && treeNodes[i].getParentNode().childDrag === false) {
                    curDragNodes = null;
                    return false;
                }
            }
            curDragNodes = treeNodes;
            return true;
        }
        function beforeDragOpen(treeId, treeNode) {
            autoExpandNode = treeNode;
            return true;
        }
        function beforeDrop(treeId, treeNodes, targetNode, moveType, isCopy) {
            className = (className === "dark" ? "":"dark");

            return true;
        }
        function onDrag(event, treeId, treeNodes) {
            className = (className === "dark" ? "":"dark");

        }
        function onDrop(event, treeId, treeNodes, targetNode, moveType, isCopy) {
            className = (className === "dark" ? "":"dark");
            if(!targetNode) return;
            layer.confirm("确定吗?",function(e){
                var data={rand:Math.random()};;
                data[dataformat.pid]=targetNode.id=="allcontent"?0:targetNode.id;;
                data[dataformat.id]=curDragNodes[0].id;
                $.ajax({
                    type: "GET",
                    url: editUrl,
                    data:data,
                    dataType: "json",
                    success: function(data) {
                        if(data.status=="success"||data.status=="y"){
                            layer.msg(data.info,{icon: 1})
                        }else{
                            layer.msg(data.info, {icon: 2})
                        }
                        refreshdata();
                    }
                });
            },function(e){
                refreshdata();
            });
        }
        function onExpand(event, treeId, treeNode) {

        }
    });
    //-->
</script>
#end

#*
* zTreeSetLinkUrl 设置点击时的URL
*
* @param url ACTION 地址
*#
#macro zTreeSetLinkUrl(url)
	setLinkUrl("#link(url)")
#end
#*
* zTreeSetAddUrl 设置添加时ACTION
*
* @param url ACTION 地址
*#
#macro zTreeSetAddUrl(url)
	setAddUrl("#link(url)")
#end
#*
* zTreeSetEditUrl 设置编辑时ACTION
*
* @param url ACTION 地址
*#
#macro zTreeSetEditUrl(url)
	setEditUrl("#link(url)")
#end
#*
* zTreeSetDelUrl 设置删除时ACTION
*
* @param url ACTION 地址
*#
#macro zTreeSetDelUrl(url)
	setDelUrl("#link(url)")
#end
#*
* setzTreeValMap  map 遍历
*
* @param map
*#
#macro setzTreeValMap(map)
	#for(var:map)
		dataformat["${var.key}"]="${var.value}";
	#{end}
#end