#*
#macro tUploadInput(name value mapInfo)#set(uploadid=fmt("upload%d",rand()),fixData=mapInfo?.fixData)
    ##if(fixData)
        #set(ss=mapInfo.remove("fixData"))
    ##end
<div class="input-group">
    <input type="text" id="${uploadid}" name="${name}" class="form-control ${mapInfo?.get("class")}" #mapToHtml(mapInfo)>
    <span id="${uploadid}-wrap"><input type="file" class="input-file" name="upfile" id="${uploadid}-file"></span>
    <span class="input-group-addon">#faIcon("cloud-upload") 浏览</span>
</div>
<script type="text/javascript">
    $(function(){
        $("#${uploadid}-wrap").on("change","#${uploadid}-file",function(){
            $.ajaxFileUpload({
                url: '#link(UPLOAD_ACTION_URL)',
                secureuri: false,
                fileElementId: "${uploadid}-file",
                dataType: 'json',
                data:{tinyFrame:1#mapToJson(fixData)},
                success: function (data, status) {
                    if(data.state=="SUCCESS"){
                        $("#${uploadid}").val(data.url);
                    }
                }
            });
        });
    });
</script>
#end

<form action="sss" action="http://127.0.0.1:8001/tt.php" method="post">



    #tUploadInput("sss1" "" {"fixData":{"data2":"sss2"}})
<input type="submit" value="save" />
  </form>



*#
#*
#macro ueditor(ueditorId ueditorName mapInfo)
<script type="text/plain" id="${ueditorId}" name="${ueditorName}">#bodyContent</script>
<script type="text/javascript">
try{UE.ueAddonPlus("${ueditorId}");}catch (e){}
UE.delEditor('${ueditorId}');
UE.getEditor('${ueditorId}',{
    #for(var:mapInfo)
    ${var.key}:${var.value},#{end}
}).execCommand('serverparam', {'sname': 'hello'})
</script>
#end



#@ueditor("page-body-ontent" "docText" {"imageFormData":"{objectId:1,objectType:2}"})sss#end*#


<div class="ibox-content">
    <div id="crop-avatar" data-toggle="modal" data-target="#avatar-modal" data-width="840" data-height="550">
    <img src="logo.jpg" alt="Logo">
    </div>
</div>

<div id="avatar-modal" class="modal hide fade " tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-header">
        <span class="modal-expand" data-expand="modal" ><i class="fa fa-expand"></i></span>
        <span class="modal-close" data-dismiss="modal" aria-hidden="true"><i class="fa fa-remove"></i></span>
        <h3>对话框标题</h3>
    </div>
    <div class="modal-body thin-scroll">
        <div class="clear"><form class="avatar-form" action="http://127.0.0.1:8001/tt.php" enctype="multipart/form-data" method="post">
            <div class="avatar-body">
                <div class="avatar-upload">
                    <input class="avatar-src" name="avatar_src" type="hidden">
                    <input class="avatar-data" name="avatar_data" type="hidden">
                    <label for="avatarInput">图片上传</label>
                    <input class="avatar-input" id="avatarInput" name="avatar_file" type="file"></div>
                <div class="row">
                    <div class="col-md-9">
                        <div class="avatar-wrapper"></div>
                    </div>
                    <div class="col-md-3">
                        <div class="avatar-preview preview-lg"></div>
                        <div class="avatar-preview preview-md"></div>
                        <div class="avatar-preview preview-sm"></div>
                    </div>
                </div>
            </div>
        </form>
        </div>
        <div class="clear"></div>
    </div>
    <div class="modal-footer">
        <div class="pull-left pl-15">
            <div class="btn-group">
                <button class="btn" data-method="rotate" data-option="-90" type="button" title="Rotate -90 degrees"><i class="fa fa-undo"></i> 向左旋转</button>
            </div>
            <div class="btn-group">
                <button class="btn" data-method="rotate" data-option="90" type="button" title="Rotate 90 degrees"><i class="fa fa-repeat"></i> 向右旋转</button>
            </div>
        </div>
        <div class="pull-right">
            <button class="btn btn-success btn-block avatar-save" type="submit"><i class="fa fa-save"></i> 保存修改</button>
        </div>
    </div>
</div>


<div class="loading" aria-label="Loading" role="img" tabindex="-1"></div>

<script>

    $(function () {

        'use strict';

        var console = window.console || { log: function () {} };

        function CropAvatar($element) {
            this.$container = $element;

            this.$avatarView = this.$container.find('.avatar-view');
            this.$avatar = this.$avatarView.find('img');
            this.$avatarModal = $("body").find('#avatar-modal');
            this.$loading = $("#page-wrapper").find('.loading');

            this.$avatarForm = this.$avatarModal.find('.avatar-form');
            this.$avatarUpload = this.$avatarForm.find('.avatar-upload');
            this.$avatarSrc = this.$avatarForm.find('.avatar-src');
            this.$avatarData = this.$avatarForm.find('.avatar-data');
            this.$avatarInput = this.$avatarForm.find('.avatar-input');
            this.$avatarSave = this.$avatarModal.find('.avatar-save');
            this.$avatarBtns = this.$avatarModal.find('[data-method="rotate"]');

            this.$avatarWrapper = this.$avatarModal.find('.avatar-wrapper');
            this.$avatarPreview = this.$avatarModal.find('.avatar-preview');

            this.init();
        }

        CropAvatar.prototype = {
            constructor: CropAvatar,
            support: {
                fileList: !!$('<input type="file">').prop('files'),
                blobURLs: !!window.URL && URL.createObjectURL,
                formData: !!window.FormData
            },

            init: function () {
                this.support.datauri = this.support.fileList && this.support.blobURLs;

                if (!this.support.formData) {
                    this.initIframe();
                }

                this.initTooltip();
                // this.initModal();
                this.addListener();
            },

            addListener: function () {
                this.$avatarView.on('click', $.proxy(this.click, this));
                this.$avatarInput.on('change', $.proxy(this.change, this));
                this.$avatarForm.on('submit', $.proxy(this.submit, this));
                this.$avatarBtns.on('click', $.proxy(this.rotate, this));
                this.$avatarSave.on('click', $.proxy(this.submit, this));
            },

            initTooltip: function () {
                this.$avatarView.tooltip({
                placement: 'bottom'
                });
            },

            initModal: function () {
                //this.$avatarModal.modal({
                //show: false
                //});
            },

            initPreview: function () {
                var url = this.$avatar.attr('src');

                this.$avatarPreview.empty().html('<img src="' + url + '">');
            },

            initIframe: function () {
                var target = 'upload-iframe-' + (new Date()).getTime(),
                    $iframe = $('<iframe>').attr({
                    name: target,
                    src: ''
                }),
                        _this = this;

                // Ready ifrmae
                    $iframe.one('load', function () {

                // respond response
                    $iframe.on('load', function () {
                var data;

                try {
                data = $(this).contents().find('body').text();
                } catch (e) {
                console.log(e.message);
                }

                if (data) {
                try {
                data = $.parseJSON(data);
                } catch (e) {
                console.log(e.message);
                }

                _this.submitDone(data);
                } else {
                _this.submitFail('Image upload failed!');
                }

                _this.submitEnd();

                });
                });

                this.$iframe = $iframe;
                this.$avatarForm.attr('target', target).after($iframe.hide());
            },

            click: function () {
                ## this.$avatarModal.modal('show');
                //console.log("test");
                this.initPreview();
            },

            change: function () {
                var files,
                        file;

                if (this.support.datauri) {
                    files = this.$avatarInput.prop('files');

                    if (files.length > 0) {
                        file = files[0];

                        if (this.isImageFile(file)) {
                            if (this.url) {
                                URL.revokeObjectURL(this.url); // Revoke the old one
                            }

                            this.url = URL.createObjectURL(file);
                            this.startCropper();
                        }
                    }
                } else {
                    file = this.$avatarInput.val();

                    if (this.isImageFile(file)) {
                        this.syncUpload();
                    }
                }
            },

            submit: function () {
                if (!this.$avatarSrc.val() && !this.$avatarInput.val()) {
                    return false;
                }
                if (this.support.formData) {
                    this.ajaxUpload();
                    return false;
                }
            },

            rotate: function (e) {
                var data;
                if (this.active) {
                    data = $(e.target).data();

                    if (data.method) {
                        this.$img.cropper(data.method, data.option);
                    }
                }
            },

            isImageFile: function (file) {
                if (file.type) {
                    return /^image\/\w+$/.test(file.type);
                } else {
                    return /\.(jpg|jpeg|png|gif)$/.test(file);
                }
            },

            startCropper: function () {
                var _this = this;

                if (this.active) {
                    this.$img.cropper('replace', this.url);
                } else {
                    this.$img = $('<img src="' + this.url + '">');
                    this.$avatarWrapper.empty().html(this.$img);
                    this.$img.cropper({
                    aspectRatio: 1,
                    preview: this.$avatarPreview.selector,
                    strict: false,
                    crop: function (data) {
                    var json = [
                        '{"x":' + data.x,
                        '"y":' + data.y,
                        '"height":' + data.height,
                        '"width":' + data.width,
                        '"rotate":' + data.rotate + '}'
                    ].join();

                    _this.$avatarData.val(json);
                    }
                    });

                    this.active = true;

                }
                console.log(this.$img.cropper("getCroppedCanvas"));
            },

            stopCropper: function () {
                if (this.active) {
                    this.$img.cropper('destroy');
                    this.$img.remove();
                    this.active = false;
                }
            },

            ajaxUpload: function (e) {
                var url = this.$avatarForm.attr('action'),
                        data = new FormData(this.$avatarForm[0]),
                        _this = this;


                $.ajax(url, {
                    headers: {'X-XSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')},
                    type: 'post',
                    data: data,
                    dataType: 'json',
                    processData: false,
                    contentType: false,

                    beforeSend: function () {
                        _this.submitStart();
                    },

                    success: function (data) {
                        _this.submitDone(data);
                    },

                    error: function (XMLHttpRequest, textStatus, errorThrown) {
                        _this.submitFail(textStatus || errorThrown);
                    },

                    complete: function () {
                        _this.submitEnd();
                    }
                });
            },

            syncUpload: function () {
                this.$avatarSave.click();
            },

            submitStart: function () {
                this.$loading.fadeIn();
            },

            submitDone: function (data) {
                if ($.isPlainObject(data)) {
                    if (data.result) {
                        this.url = data.result;
                        if (this.support.datauri || this.uploaded) {
                            this.uploaded = false;
                            this.cropDone();
                        } else {
                            this.uploaded = true;
                            this.$avatarSrc.val(this.url);
                            this.startCropper();
                        }
                        this.$avatarInput.val('');
                    } else if (data.message) {
                        this.alert(data.message);
                    }
                } else {
                    this.alert('Failed to response');
                }
            },

            submitFail: function (msg) {
                this.alert(msg);
            },

            submitEnd: function () {
                this.$loading.fadeOut();
            },

            cropDone: function () {
                this.$avatarForm.get(0).reset();
                this.$avatar.attr('src', this.url);
                this.stopCropper();
                this.$avatarModal.modal('hide');
            },

            alert: function (msg) {
               /* var $alert = [
                    '<div class="alert alert-danger avater-alert">',
                    '<button type="button" class="close" data-dismiss="alert">&times;</button>',
                    msg,
                    '</div>'
                ].join('');

                this.$avatarUpload.after($alert);*/
                layer.msg(msg,{icon:2,time:1000});
            }
        };

        $(function () {
            return new CropAvatar($('#crop-avatar'));
        });

    });
</script>
