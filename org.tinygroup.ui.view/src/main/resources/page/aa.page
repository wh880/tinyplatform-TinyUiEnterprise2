#macro treeSelect(name value mapInfo)#set(sid=mapInfo?.id?:fmt("sid%d",rand()),tempid=fmt("sid%d",rand()))
<script>
    var zNodes${tempid} =[];
</script>
<input name="${tempid}" id="${sid}"  class="form-control no-radius" type="text" value="" #mapToHtml(mapInfo)/>
<input name="${name}" type="hidden" value="${value}"/>
<div class="hide" id="${sid}-rap">
    <div id="${sid}-content" class="tree-sel-content t-menu-content hide">
        <ul id="ztree${sid}" class="fa-ztree">
        </ul>
        <div class="hide" id="${sid}-msg">暂无信息</div>
        <div class="fix-part" style="padding:0 5px">#bodyContent</div>
    ##		<span style="position:absolute;right:10px;bottom:5px;z-index:2;cursor:pointer" id="close${sid}"><i class="fa fa-remove"></i></span>
    </div>
</div>
<script type="text/javascript">
    $(function(){
        var setting = {
            view: {
                dblClickExpand: false
            },
            data: {
                simpleData: {
                    enable: true
                }
            },
            callback: {
                //beforeClick: beforeClick,
                onClick: onClick
            }
        };
        var zTree;
        var zNodes =zNodes${tempid};
        var $treeContent=$("#ztree${sid}");
        var $treeRap=$("#${sid}-content");
        var $input=$("#${sid}");
        var $inputV=$("#${sid}").next("input");
        #set(dataurl=mapInfo?.get("data-URL"))
        #if(dataurl)
            function refreshdata(callback){
                $.ajax({
                    type: "GET",
                    url: contextPath+$input.attr("data-url"),
                    cache:false,
                    dataType: "json",
                    success: function(data) {
                        zNodes=data;
                        try{zTree.destroy();}catch (e){}
                        zTree=$.fn.zTree.init($treeContent, setting, zNodes);
                        callback&&callback();
                        //initzTree();
                    }
                });
            }
            refreshdata(function(){
                initInputVale();
            });

            $input.off("refresh").on("refresh",function(e,callback){
        refreshdata(callback);
        })
        #else
            initzTree();
        #end
        function initzTree(){
            zTree=$.fn.zTree.init($treeContent, setting, zNodes);
            initInputVale();
        }
        function initInputVale(){
            var $val=$inputV.val();
            if(!$val) return false;
            for(var i=0;i<zNodes.length;i++){
                if($val==zNodes[i].id){
                        $input.val(zNodes[i].name);
                        $inputV.val($val);
                        $input.trigger("setValue",zNodes[i]);
                    break;
                }
            }
        }
        function beforeClick(treeId, treeNode) {
            var check = (treeNode && !treeNode.isParent);
            if (!check) {
                zTree.expandNode(treeNode);
                return false;
            }
        }
        function onClick(e, treeId, treeNode) {
                $input.val(treeNode.name);
                $inputV.val(treeNode.id);
                $input.trigger("setValue",treeNode);
            hideMenu();
        }
        function hideMenu() {
                $treeRap.fadeOut("fast");
            $("#${sid}-rap").append($treeRap);
        }
            $input.off("click.tree").on("click.tree",function(){
            $("body").append($treeRap);
        var thisOffset = $(this).offset();
            $treeRap.css({width:$(this).css("width"),left:thisOffset.left + "px", top:thisOffset.top + $(this).outerHeight() + "px"}).slideDown("fast");
        }).on("add",function(e,newNode){
        zTree.addNodes(null, newNode);
        });
        $("body").off("click.tree").on("click.tree",function(e){
            if($(e.target).attr("id")!=$input.attr("id")&&$(e.target).parents("#"+$treeRap.attr("id")).size()==0){
                hideMenu();
            }
        }).on("click.tree",".fix-part",function(e){
            hideMenu();
        });
        function bfxs(zTree, nodes, tt) {
            tt=tt.toLowerCase();
            var keyName=nodes[zTree.setting.data.key.name].toLowerCase()
            if (nodes.children == null) {//无子节点
                if (!tt||keyName.indexOf(tt) >= 0) {//无子节点，但是包含tt
                    fjdxs(zTree, nodes);
                }
            }else {//有子节点
                if (!tt||keyName.indexOf(tt) >= 0){//有而且包含
                    fjdxs(zTree, nodes);
                    xsall(zTree, nodes);
                }else {//有但不包含
                    $.each(nodes.children, function (aa, bb) {
                        bfxs(zTree, bb, tt);
                    })
                }
            }
        }
        ///显示所有父节点
        function fjdxs(zTree, nodes) {
            if (nodes.getParentNode() == null) {
                zTree.showNode(nodes);
            }
            else {
                zTree.showNode(nodes);
                fjdxs(zTree, nodes.getParentNode());
            }
        }
        ///全显
        function xsall(ztree, nodes) {
            ztree.showNode(nodes);
            if (nodes.children != null) {
                $.each(nodes.children, function (x, y) {
                    xsall(ztree, y);
                })
            }
        }
        ///么有子节点的直接隐藏
        function ycall(ztree, nodes) {
            ztree.hideNode(nodes);
            if (nodes.children != null) {
                $.each(nodes.children, function (x, y) {
                    ycall(ztree, y);
                })
            }
        }
        $("#${sid}").off("propertychange input").on("propertychange input",function(){
            var key = $(this).val();
            var nodes = zTree.getNodes();
            zTree.showNodes(nodes);
            if(!key){
                $("#${sid}-msg").hide();
                //return;
            }
            var zts = zTree.getNodesByParamFuzzy("name", key);
            if (zts.length==0){
                $("#${sid}-msg").show();
            }else{
                $("#${sid}-msg").hide();
            }

            $.each(nodes, function (x, y) {
                ycall(zTree, y);
            });

            $.each(nodes, function (index, node) {
                bfxs(zTree, node, key);
            });
            zTree.expandAll(true);
        }).off("close").on("close",function(){
            hideMenu();
        });
    });
</script>
#end


#treeSelect("ajian" "1" {"id":"input-text","data-URL":"/data/ztreeData.pagelet"})

<script>
    $(function(){
        $("#input-text").trigger("refresh");
    })
</script>

