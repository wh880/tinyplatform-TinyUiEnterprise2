

#macro getCropAvatar(picUrl,cropMap)#set(avatarId=fmt("ca%d",rand()))
<span id="${avatarId}" data-toggle="modal" data-target="#avatar-modal" data-width="840" data-height="550">
    <span class="avatar-view"><img src="#link(picUrl)" alt="" data-width="${cropMap?.width?:"160"}" data-height="${cropMap?.height?:"90"}"></span>
</span>
<div id="avatar-modal" class="modal hide fade " tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-header">
        <span class="modal-expand" data-expand="modal" ><i class="fa fa-expand"></i></span>
        <span class="modal-close" data-dismiss="modal" aria-hidden="true"><i class="fa fa-remove"></i></span>
        <h3>图片剪取</h3>
    </div>
    <div class="modal-body thin-scroll">
        <div class="clear"><form class="avatar-form" action="#link(UPLOAD_ACTION_URL)" enctype="multipart/form-data" method="post">
            <div class="avatar-body">
                <div class="avatar-upload">
                    <input class="avatar-src" name="avatar_src" type="hidden">
                    <input class="avatar-data" name="avatar_data" type="hidden">
                    <label for="avatarInput">图片上传</label>
                    <input class="avatar-input" id="avatarInput" name="avatar_file" type="file"></div>
                <div class="row">
                    <div class="col-md-9">
                        <div class="avatar-wrapper"></div>
                    </div>
                    <div class="col-md-3">
                        <div class="avatar-preview preview-lg"></div>
                        <div class="avatar-preview preview-md"></div>
                        <div class="avatar-preview preview-sm"></div>
                    </div>
                </div>
            </div>
        </form>
        </div>
        <div class="clear"></div>
    </div>
    <div class="modal-footer">
        <div class="pull-left pl-15">
            <div class="btn-group">
                <button class="btn" data-method="rotate" data-option="-90" type="button" title="Rotate -90 degrees"><i class="fa fa-undo"></i> 向左旋转</button>
            </div>
            <div class="btn-group">
                <button class="btn" data-method="rotate" data-option="90" type="button" title="Rotate 90 degrees"><i class="fa fa-repeat"></i> 向右旋转</button>
            </div>
        </div>
        <div class="pull-right">
            <button class="btn btn-success btn-block avatar-save" type="submit"><i class="fa fa-save"></i> 保存修改</button>
        </div>
    </div>
</div>



<script>
    $(function () {
        'use strict';
        var console = window.console || { log: function () {} };
        function CropAvatar($element) {
            this._container = $element;
            this._avatar = this._container.find('img');
            this._avatarModal = $("body").find('#avatar-modal');
            this._avatarForm = this._avatarModal.find('.avatar-form');
            this._avatarUpload = this._avatarForm.find('.avatar-upload');
            this._avatarSrc = this._avatarForm.find('.avatar-src');
            this._avatarData = this._avatarForm.find('.avatar-data');
            this._avatarInput = this._avatarForm.find('.avatar-input');
            this._avatarSave = this._avatarModal.find('.avatar-save');
            this._avatarBtns = this._avatarModal.find('[data-method="rotate"]');
            this._avatarWrapper = this._avatarModal.find('.avatar-wrapper');
            this._avatarPreview = this._avatarModal.find('.avatar-preview');
            this.opWidth=parseInt(this._avatar.attr("data-width"));
            this.opHeight=parseInt(this._avatar.attr("data-height"));
            this.init();
        }
        CropAvatar.prototype = {
            constructor: CropAvatar,
            support: {
                fileList: !!$('<input type="file">').prop('files'),
                blobURLs: !!window.URL && URL.createObjectURL,
                formData: !!window.FormData
            },

            init: function () {
                this.support.datauri = this.support.fileList && this.support.blobURLs;
                this.addListener();
            },

            addListener: function () {
                this._avatarView.on('click', $.proxy(this.click, this));
                this._avatarInput.on('change', $.proxy(this.change, this));
                this._avatarForm.on('submit', $.proxy(this.submit, this));
                this._avatarBtns.on('click', $.proxy(this.rotate, this));
                this._avatarSave.on('click', $.proxy(this.submit, this));
            },

            initPreview: function () {
                var url = this._avatar.attr('src');
                this._avatarPreview.empty().html('<img src="' + url + '">');
            },
            click: function () {
                this.initPreview();
            },
            change: function () {
                var files,file;
                if (this.support.datauri) {
                    files = this._avatarInput.prop('files');

                    if (files.length > 0) {
                        file = files[0];

                        if (this.isImageFile(file)) {
                            if (this.url) {
                                URL.revokeObjectURL(this.url); // Revoke the old one
                            }

                            this.url = URL.createObjectURL(file);
                            this.startCropper();
                        }
                    }
                } else {
                    file = this._avatarInput.val();
                    if (this.isImageFile(file)) {
                        this.syncUpload();
                    }
                }
            },

            submit: function () {
                if (!this._avatarSrc.val() && !this._avatarInput.val()) {
                    return false;
                }
                if (this.support.formData) {
                    this.ajaxUpload();
                    return false;
                }
            },

            rotate: function (e) {
                var data;
                if (this.active) {
                    data = $(e.target).data();
                    if (data.method) {
                        this._img.cropper(data.method, data.option);
                    }
                }
            },

            isImageFile: function (file) {
                if (file.type) {
                    return /^image\/\w+$/.test(file.type);
                } else {
                    return /\.(jpg|jpeg|png|gif)$/.test(file);
                }
            },

            startCropper: function () {
                var _this = this;

                if (this.active) {
                    this._img.cropper('replace', this.url);
                } else {
                    this._img = $('<img src="' + this.url + '">');
                    this._avatarWrapper.empty().html(this._img);
                    this._img.cropper({
                        aspectRatio: this.opWidth/this.opHeight,
                        preview: this._avatarPreview.selector,
                        strict: false,
                        crop: function (data) {
                            var json = [
                                '{"x":' + data.x,
                                '"y":' + data.y,
                                '"height":' + data.height,
                                '"width":' + data.width,
                                '"rotate":' + data.rotate + '}'
                            ].join();
                            _this._avatarData.val(json);
                        }
                    });

                    this.active = true;

                }

            },

            stopCropper: function () {
                if (this.active) {
                    this._img.cropper('destroy');
                    this._img.remove();
                    this.active = false;
                }
            },

            ajaxUpload: function (e) {
                var url = this._avatarForm.attr('action'),
                        data = new FormData(this._avatarForm[0]),
                        _this = this;
                var imginfo=this._img.cropper("getImageData");
                var canvas=this._img.cropper("getCroppedCanvas",{
                    width:this.opWidth,
                    height:this.opHeight
                });
                var dataurl = canvas.toDataURL('image/png');
                console.log(dataurl);
                var blob = window.dataURLtoBlob(dataurl);
                data.append("image", blob, "image.png");

                $.ajax(url, {
                    headers: {'X-XSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')},
                    type: 'post',
                    data: data,
                    dataType: 'json',
                    processData: false,
                    contentType: false,

                    beforeSend: function () {
                        _this.submitStart();
                    },

                    success: function (data) {
                        _this.submitDone(data);
                    },

                    error: function (XMLHttpRequest, textStatus, errorThrown) {
                        _this.submitFail(textStatus || errorThrown);
                    },

                    complete: function () {
                        _this.submitEnd();
                    }
                });
            },

            syncUpload: function () {
                this._avatarSave.click();
            },

            submitStart: function () {

            },

            submitDone: function (data) {
                if ($.isPlainObject(data)) {
                    if (data.state=="success") {
                        this.url = data.url;
                        if (this.support.datauri || this.uploaded) {
                            this.uploaded = false;
                            this.cropDone();
                        } else {
                            this.uploaded = true;
                            this._avatarSrc.val(this.url);
                            this.startCropper();
                        }
                        this._avatarInput.val('');
                    } else {
                        this.alert("系统错误");
                    }
                } else {
                    this.alert('Failed to response');
                }
            },

            submitFail: function (msg) {
                this.alert(msg);
            },

            submitEnd: function () {

            },

            cropDone: function () {
                this._avatarForm.get(0).reset();
                this._avatar.attr('src', contextPath+this.url);
                this.stopCropper();
                this._avatarModal.modal('hide');
            },

            alert: function (msg) {
                layer.msg(msg,{icon:2,time:1000});
            }
        };
        $(function () {
            return new CropAvatar($('#${avatarId}'));
        });
    });
</script>

#end
